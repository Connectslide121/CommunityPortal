// <auto-generated />
using System;
using DataBaseConnection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataBaseConnection.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240105214233_add-comment-methods")]
    partial class addcommentmethods
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Core.NewsClasses.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Core.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Post");
                });

            modelBuilder.Entity("Core.UserClasses.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.Property<int>("AttendantsUserId")
                        .HasColumnType("int");

                    b.Property<int>("EventsAttendedEventId")
                        .HasColumnType("int");

                    b.HasKey("AttendantsUserId", "EventsAttendedEventId");

                    b.HasIndex("EventsAttendedEventId");

                    b.ToTable("EventUser");
                });

            modelBuilder.Entity("Core.CommunityClasses.Blog", b =>
                {
                    b.HasBaseType("Core.Post");

                    b.Property<int>("BlogCategory")
                        .HasColumnType("int");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Blog");
                });

            modelBuilder.Entity("Core.NewsClasses.News", b =>
                {
                    b.HasBaseType("Core.Post");

                    b.Property<int>("NewsCategory")
                        .HasColumnType("int");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("News");
                });

            modelBuilder.Entity("Core.UserClasses.Admin", b =>
                {
                    b.HasBaseType("Core.UserClasses.User");

                    b.Property<int>("AdminPrivilegeLevel")
                        .HasColumnType("int");

                    b.Property<string>("AdminTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Core.UserClasses.Guest", b =>
                {
                    b.HasBaseType("Core.UserClasses.User");

                    b.Property<int>("UserExperience")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Guest");
                });

            modelBuilder.Entity("Core.UserClasses.Moderator", b =>
                {
                    b.HasBaseType("Core.UserClasses.User");

                    b.Property<int>("ModerationArea")
                        .HasColumnType("int");

                    b.Property<int>("ModerationExperience")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Moderator");
                });

            modelBuilder.Entity("Core.Comment", b =>
                {
                    b.HasOne("Core.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.UserClasses.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Post", b =>
                {
                    b.HasOne("Core.UserClasses.User", "User")
                        .WithMany("PostHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.HasOne("Core.UserClasses.User", null)
                        .WithMany()
                        .HasForeignKey("AttendantsUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.NewsClasses.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsAttendedEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Core.UserClasses.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
